#Set working directory
setwd("C:/Users/aleksandso/OneDrive - nih.no/Documents/DataScience/Course_assignments/Reprodresearch/RepData_PeerAssessment1")
#List files to get overview of contents
list.files("C:/Users/aleksandso/OneDrive - nih.no/Documents/DataScience/Course_assignments/Reprodresearch/RepData_PeerAssessment1")
#load dataset
Data <- read.csv(unz("activity.zip", "activity.csv"))
#Get an overview of the dataset
str(Data)
summary(Data)
#Get an overview of the dataset
str(Data)
summary(Data)
View(Data)
dim(Data)
str(Data)
summary(Data)
dim(Data)
View(Data)
#correct datatypes
as.numeric(Data$steps)
as.date(Data$date)
#correct datatypes
as.numeric(Data$steps)
as.Date(Data$date)
as.numeric(Data$interval)
str(Data)
#correct datatypes
as.numeric(Data$steps)
as.Date(Data$date)
as.numeric(Data$interval)
str(Data)
n_days <- length(unique(Data$date))
n_days
mean_steps <- mean(Data$steps) / n_days
mean_steps <- mean(Data$steps) / n_days
mean_steps <- mean(Data$steps) / n_days
mean_steps
mean_steps <- mean(Data$steps, na.rm = TRUE) / n_days
mean_steps
library(dplyr)
daily_steps <- data %>%
group_by(date) %>%
summarise(total_steps = sum(steps, na.rm = TRUE))  # Summing steps by date
daily_steps <- Data %>%
group_by(date) %>%
summarise(total_steps = sum(steps, na.rm = TRUE))  # Summing steps by date
daily_steps
mean_steps <- mean(daily_steps, na.rm = TRUE) / n_days
mean_steps
str(daily_steps)
View(daily_steps)
mean_steps <- mean(daily_steps$total_steps, na.rm = TRUE) / n_days
mean_steps
mean_steps <- mean(daily_steps$total_steps, na.rm = TRUE)
mean_steps
#Set working directory
setwd("C:/Users/aleksandso/OneDrive - nih.no/Documents/DataScience/Course_assignments/Reprodresearch/RepData_PeerAssessment1")
#load dataset
Data <- read.csv(unz("activity.zip", "activity.csv"))
#find number of steps per day
library(dplyr)
daily_steps <- Data %>%
group_by(as.numeric(date)) %>%
summarise(total_steps = sum(steps, na.rm = TRUE))  # Summing steps by date
#Find mean number of steps per day
mean_steps <- mean(daily_steps$total_steps, na.rm = TRUE, digits = 1)
hist(daily_summary)
hist(mean_steps)
View(daily_summary)
#find number of steps per day
daily_summary <- Data %>%
group_by(date) %>%
summarise(total_steps = sum(steps, na.rm = TRUE)) %>%
summarise(mean_steps = mean(total_steps, na.rm = TRUE))
mean_steps <- daily_summary$mean_steps
View(daily_summary)
str(daily_summary)
dim(daily_summary)
daily_summary <- Data %>%
group_by(date) %>%
summarise(total_steps = sum(steps, na.rm = TRUE)) %>%
str(daily_summary)
View(daily_summary)
summary(daily_summary)
str(daily_summary)
#Create DF of daily steps:
daily_summary <- Data %>%
group_by(date) %>%
summarise(total_steps = sum(steps, na.rm = TRUE)) %>%
hist(daily_summary)
#Create DF of daily steps:
daily_summary <- Data %>%
group_by(date) %>%
summarise(total_steps = sum(steps, na.rm = TRUE))
hist(daily_summary)
#Create DF of daily steps:
daily_steps <- Data %>%
group_by(date) %>%
summarise(total_steps = sum(steps, na.rm = TRUE))
#Create DF of daily steps:
daily_steps <- Data %>%
group_by(date) %>%
summarise(total_steps = sum(steps, na.rm = TRUE))
ggplot(daily_steps, aes(x = total_steps)) +
geom_histogram(binwidth = 1000, fill = "blue", color = "black", alpha = 0.7) +
labs(
title = "Distribution of Total Steps Per Day",
x = "Total Steps Per Day",
y = "Frequency"
) +
theme_minimal()
library(ggplot2)
#Create DF of daily steps:
daily_steps <- Data %>%
group_by(date) %>%
summarise(total_steps = sum(steps, na.rm = TRUE))
ggplot(daily_steps, aes(x = total_steps)) +
geom_histogram(binwidth = 1000, fill = "blue", color = "black", alpha = 0.7) +
labs(
title = "Distribution of Total Steps Per Day",
x = "Total Steps Per Day",
y = "Frequency"
) +
theme_minimal()
#Create DF of daily steps:
daily_steps <- Data %>%
group_by(date) %>%
summarise(total_steps = sum(steps, na.rm = TRUE))
ggplot(daily_steps, aes(x = total_steps)) +
geom_histogram(binwidth = 1000, fill = "blue", color = "black", alpha = 0.7) +
labs(
title = "Distribution of Total Steps Per Day",
x = "Total Steps Per Day",
y = "Frequency"
) +
theme_minimal()
```{r echo = TRUE}
#Create DF of daily steps:
daily_steps <- Data %>%
filter(!is.na(steps)) %>% # Remove rows where steps are NA
group_by(date) %>%
summarise(total_steps = sum(steps, na.rm = TRUE))
ggplot(daily_steps, aes(x = total_steps)) +
geom_histogram(binwidth = 1000, fill = "blue", color = "black", alpha = 0.7) +
labs(
title = "Distribution of Total Steps Per Day",
x = "Total Steps Per Day",
y = "Frequency"
) +
theme_minimal()
#find number of steps per day
daily_summary <- Data %>%
group_by(date) %>%
summarise(total_steps = sum(steps, na.rm = TRUE)) %>%
summarise(mean_steps = mean(total_steps, na.rm = TRUE, digits = 0))
mean_steps <- daily_summary$mean_steps
# Find number of steps per day
daily_summary <- Data %>%
group_by(date) %>%
summarise(total_steps = sum(steps, na.rm = TRUE)) %>%
summarise(mean_steps = mean(total_steps, na.rm = TRUE, digits = 0))
mean_steps <- daily_summary$mean_steps
# Find number of steps per day
daily_summary <- Data %>%
group_by(date) %>%
summarise(total_steps = sum(steps, na.rm = TRUE)) %>%
summarise(mean_steps = mean(total_steps, na.rm = TRUE)) %>%
summarise(mean_steps = round(mean_steps, 0)) # Ensures rounding to 0
mean_steps <- daily_summary$mean_steps
# Find number of steps per day
daily_summary <- Data %>%
group_by(date) %>%
summarise(total_steps = sum(steps, na.rm = TRUE)) %>%
summarise(mean_steps = mean(total_steps, na.rm = TRUE)) %>%
summarise(mean_steps = round(mean_steps, 0)) %>%
summarise(median_steps = median((total_steps, na.rm = TRUE))
# Find number of steps per day
daily_summary <- Data %>%
group_by(date) %>%
summarise(total_steps = sum(steps, na.rm = TRUE)) %>%
summarise(mean_steps = mean(total_steps, na.rm = TRUE)) %>%
summarise(median_steps = median(total_steps, na.rm = TRUE))
# Find number of steps per day
# Calculate total steps per day
steps_per_day <- tapply(Data$steps, Data$date, sum, na.rm = TRUE)
# Calculate mean and median steps per day
mean_steps <- mean(steps_per_day, na.rm = TRUE)
median_steps <- median(steps_per_day, na.rm = TRUE)
---
title: "Reproducible Research: Peer Assessment 1"
---
title: "Reproducible Research: Peer Assessment 1"
median_steps
mean_steps
steps_per_day
str(Data)
#calculate steps per interval
average_steps_by_interval <- Data %>%
group_by(interval) %>%
summarise(mean_steps = mean(steps, na.rm = TRUE))
# Plotting
g <- ggplot(average_steps_by_interval, aes(x = interval, y = mean_steps)) +
geom_line(color = "blue") +  # Line plot
labs(
title = "Average Steps Taken Per Interval",
x = "5-minute Interval",
y = "Average Number of Steps"
) +
theme_minimal()
#calculate steps per interval
average_steps_by_interval <- Data %>%
group_by(interval) %>%
summarise(mean_steps = mean(steps, na.rm = TRUE))
# Plotting
g <- ggplot(average_steps_by_interval, aes(x = interval, y = mean_steps)) +
geom_line(color = "blue") +  # Line plot
labs(
title = "Average Steps Taken Per Interval",
x = "5-minute Interval",
y = "Average Number of Steps"
) +
theme_minimal()
#display plot
print(g)
average_steps_by_interval
View(average_steps_by_interval)
#find interval with the highest step count
max(average_steps_by_interval)
# Find the interval with the maximum number of steps
max_interval <- average_steps_by_interval %>%
filter(mean_steps == max(mean_steps)) %>%
select(interval, mean_steps)
max_interval
max_interval
View(Data)
# Calculate mean steps per interval
average_steps_by_interval <- Data %>%
group_by(interval) %>%
summarise(mean_steps = mean(steps, na.rm = TRUE))
# Plotting the time series
g <- ggplot(average_steps_by_interval, aes(x = interval, y = mean_steps)) +
geom_line(color = "blue") +  # Line plot
labs(
title = "Average Steps Taken Per Interval",
x = "5-minute Interval",
y = "Average Number of Steps"
) +
theme_minimal()
#display plot
print(g)
# Find the interval with the maximum number of steps
max_interval <- average_steps_by_interval %>%
filter(mean_steps == max(mean_steps)) %>%
select(interval, mean_steps)
max_interval
# Calculate mean steps per interval for each day
daily_steps_by_interval <- Data %>%
group_by(date, interval) %>%
summarise(mean_steps = mean(steps, na.rm = TRUE))
# Calculate the average steps per interval across all days
average_steps_by_interval <- daily_steps_by_interval %>%
group_by(interval) %>%
summarise(mean_steps = mean(mean_steps, na.rm = TRUE))
# Plotting the time series
g <- ggplot(average_steps_by_interval, aes(x = interval, y = mean_steps)) +
geom_line(color = "blue") +  # Line plot
labs(
title = "Average Steps Taken Per Interval",
x = "5-minute Interval",
y = "Average Number of Steps"
) +
theme_minimal()
#display plot
print(g)
# Find the interval with the maximum number of steps
max_interval <- average_steps_by_interval %>%
filter(mean_steps == max(mean_steps)) %>%
select(interval, mean_steps)
max_interval
# Find the interval with the maximum average number of steps
max_interval <- average_steps_by_interval %>%
filter(mean_steps == max(mean_steps)) %>%
select(interval, mean_steps)
max_interval
max_interval
# Find the interval with the maximum average number of steps
max_interval_info <- average_steps_by_interval %>%
filter(mean_steps == max(mean_steps)) %>%
left_join(daily_steps_by_interval, by = "interval") %>%
select(interval, mean_steps, date)
# Find the interval with the maximum average number of steps
max_interval_info <- average_steps_by_interval %>%
filter(mean_steps == max(mean_steps)) %>%
left_join(daily_steps_by_interval, by = "interval") %>%
select(interval, mean_steps, date)
# Find the interval with the maximum average number of steps
max_interval_info <- average_steps_by_interval %>%
filter(mean_steps == max(mean_steps, na.rm = TRUE)) %>%
left_join(daily_steps_by_interval, by = "interval") %>%
select(interval, mean_steps, date)
# Find the interval with the maximum average number of steps
max_interval_info <- average_steps_by_interval %>%
filter(mean_steps == max(mean_steps, na.rm = TRUE)) %>%
left_join(daily_steps_by_interval, by = "interval") %>%
select(interval, mean_steps, date)
average_steps_by_interval
daily_steps_by_interval
#higest interval
max(daily_steps_by_interval$mean_steps)
str(daily_steps_by_interval)
View(daily_steps_by_interval)
max_interval_info <- daily_steps_by_interval %>%
filter(mean_steps == max(mean_steps, na.rm = TRUE)) %>%
select(date, interval, mean_steps)
max_interval_info
max_interval_info <- daily_steps_by_interval %>%
filter(!is.na(mean_steps)) %>%  # Remove rows with NAs in mean_steps
filter(mean_steps == max(mean_steps, na.rm = TRUE)) %>%
select(date, interval, mean_steps)
max_interval_info
max_interval_info
# Find the interval with the maximum average number of steps
max_interval_info <- daily_steps_by_interval %>%
filter(!is.na(mean_steps)) %>%  # Remove rows with NAs in mean_steps
filter(mean_steps == max(mean_steps, na.rm = TRUE)) %>%
select(date, interval, mean_steps)
max_interval_info
# Find the interval with the maximum average number of steps
max_interval_info <- daily_steps_by_interval %>%
filter(!is.na(mean_steps)) %>%  # Remove rows with NAs in mean_steps
filter(mean_steps == max(mean_steps, na.rm = TRUE)) %>%
select(date, interval, mean_steps)
print(max_interval_info)
# Find the interval with the maximum average number of steps
max_interval_info <- daily_steps_by_interval %>%
filter(!is.na(mean_steps)) %>%  # Remove rows with NAs in mean_steps
filter(mean_steps == max(mean_steps, na.rm = TRUE)) %>%
select(date, interval, mean_steps)
# Print the result
print(max_interval_info)
```
# Calculate mean steps per interval for each day
daily_steps_by_interval <- Data %>%
group_by(date, interval) %>%
summarise(mean_steps = mean(steps, na.rm = TRUE))
# Calculate the average steps per interval across all days
average_steps_by_interval <- daily_steps_by_interval %>%
group_by(interval) %>%
summarise(mean_steps = mean(mean_steps, na.rm = TRUE))
# Plotting the time series
g <- ggplot(average_steps_by_interval, aes(x = interval, y = mean_steps)) +
geom_line(color = "blue") +  # Line plot
labs(
title = "Average Steps Taken Per Interval",
x = "5-minute Interval",
y = "Average Number of Steps"
) +
theme_minimal()
#display plot
print(g)
# Find the interval with the maximum average number of steps
max_interval_info <- daily_steps_by_interval %>%
filter(!is.na(mean_steps)) %>%  # Remove rows with NAs in mean_steps
filter(mean_steps == max(mean_steps, na.rm = TRUE)) %>%
select(date, interval, mean_steps)
# Print the result
print(max_interval_info)
max_interval_info <- daily_steps_by_interval %>%
filter(mean_steps == max(mean_steps, na.rm = TRUE)) %>%
max_interval_info <- daily_steps_by_interval %>%
filter(!is.na(mean_steps)) %>%  # Remove rows with NAs in mean_steps
filter(mean_steps == max(mean_steps, na.rm = TRUE)) %>%
select(date, interval)
#find higest interval step
max_interval_info <- daily_steps_by_interval %>%
filter(!is.na(mean_steps)) %>%  # Remove rows with NAs in mean_steps
filter(mean_steps == max(mean_steps, na.rm = TRUE)) %>%
select(date, interval)
# Print the result
print(max_interval_info)
#find higest interval step
max_interval_info <- daily_steps_by_interval %>%
filter(!is.na(mean_steps)) %>%  # Remove rows with NAs in mean_steps
filter(mean_steps == max(mean_steps, na.rm = TRUE)) %>%
select(date, interval) %>%
slice(1)  # Select only the first row (to ensure only one row is returned)
# Print the result
print(max_interval_info)
#find higest interval step
max_interval_info <- daily_steps_by_interval %>%
filter(!is.na(mean_steps)) %>%  # Remove rows with NAs in mean_steps
filter(mean_steps == max(mean_steps, na.rm = TRUE)) %>%
select(date, interval) %>%
slice(1)  # Select only the first row (to ensure only one row is returned)
# Print the result
print(max_interval_info)
#find higest interval step
max_interval_info <- daily_steps_by_interval %>%
filter(!is.na(mean_steps)) %>%
filter(mean_steps == max(mean_steps, na.rm = TRUE)
# Print the result
print(max_interval_info)
#find higest interval step
max_interval_info <- daily_steps_by_interval %>%
filter(!is.na(mean_steps)) %>%
filter(mean_steps == max(mean_steps, na.rm = TRUE) %>%
# Print the result
print(max_interval_info)
#find higest interval step
max_interval_info <- daily_steps_by_interval %>%
#find higest interval step
max_interval_info <- daily_steps_by_interval %>%
filter(!is.na(mean_steps)) %>%
filter(mean_steps == max(mean_steps, na.rm = TRUE))
max_interval_info[1,1]
#find higest interval step
max_interval_info <- daily_steps_by_interval %>%
filter(!is.na(mean_steps)) %>%
filter(mean_steps == max(mean_steps, na.rm = TRUE))
max_interval_info[1,1]
# Print the result
print(max_interval_info)
# Create DF of daily steps:
daily_steps <- Data %>%
filter(!is.na(steps)) %>% # Remove rows where steps are NA
group_by(date) %>%
summarise(total_steps = sum(steps, na.rm = TRUE))
g <- ggplot(daily_steps, aes(x = total_steps, y = date)) +
geom_point(color = "blue", alpha = 0.7) +  # Points to represent steps per day
labs(
title = "Total Steps Per Day",
x = "Total Steps",
y = "Date"
) +
theme_minimal()
g  # Display the plot explicitly
steps_per_day
View(steps_per_day)
type(steps_per_day)
plot <- hist(steps_per_day)
?hist
?ggplot
str(steps_per_day)
# Find number of steps per day
# Calculate total steps per day
Data$date <- as.Date(Data$date)
steps_per_day <- tapply(Data$steps, Data$date, sum, na.rm = TRUE)
plot <- hist(steps_per_day)
View(steps_per_day)
class(steps_per_day)
as.data.frame(steps_per_day)
plot <- hist(steps_per_day$)
plot <- hist(steps_per_day)
View(steps_per_day)
as.data.frame(steps_per_day)
View(steps_per_day)
steps_per_day_histogram <- Data %>%
group_by(date)
summarise(daily_steps = mean(steps, na.rm = TRUE))
str(Data)
steps_per_day_histogram <- Data %>%
group_by(date)
summarise(daily_steps = mean(steps, na.rm = TRUE))
daily_steps <- Data %>%
group_by(date) %>%
summarise(daily_steps = mean(steps, na.rm = TRUE))
daily_steps
View(daily_steps)
View(Data)
hist(daily_steps)
hist(daily_steps$daily_steps)
daily_steps <- Data %>%
group_by(date) %>%
summarise(daily_steps = mean(steps, na.rm = TRUE))
summary(daily_steps)
daily_steps <- Data %>%
group_by(date) %>%
summarise(daily_steps = sum(steps, na.rm = TRUE))
hist(daily_steps$daily_steps)
daily_steps
# Create a histogram showing of daily steps
#Start by making a data frame which includes the daily average
daily_steps <- Data %>%
group_by(date) %>%
summarise(daily_steps = sum(steps, na.rm = TRUE))
# Plot the histogram
g <- ggplot(daily_steps, aes(x = total_steps)) +
geom_histogram(binwidth = 1000, fill = "blue", color = "black", alpha = 0.7) +
labs(
title = "Total Steps Per Day",
x = "Total Steps Per Day",
y = "Frequency"
) +
theme_minimal()
g  # Display the plot explicitly
histogram <- ggplot(daily_steps, aes(x=daily_steps)
+ geom_histogram(binwidth=1, color="black", fill="white")
)
histogram <- ggplot(daily_steps, aes(x= daily_steps)
+ geom_histogram(binwidth=1, color="black", fill="white")
)
histogram <- ggplot(daily_steps, aes(x= daily_steps)) +
geom_histogram(binwidth=1, color="black", fill="white")
histogram
histogram <- ggplot(daily_steps, aes(x= daily_steps)) +
geom_histogram(color="black", fill="white")
histogram
daily_steps <- Data %>%
group_by(date) %>%
summarise(daily_steps = sum(steps, na.rm = TRUE))
ggplot(daily_steps, aes(x= daily_steps)) +
geom_histogram(color="black", fill="blue", na.rm = TRUE)
